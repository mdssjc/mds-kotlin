type: edu
custom_name: stage4
files:
- name: test/GeneratorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import signature.MainKt;

    public abstract class GeneratorTest<T> extends StageTest<T> {
        public GeneratorTest() {
            super(MainKt.class);
        }
    }
  learner_created: false
- name: test/TestCaseHelpers.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    class InputClue(
            val input: String,
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    fun inputCase(
            input: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(InputClue(input, isPrivate, hint), input)


  learner_created: false
- name: test/Authors.kt
  visible: false
  text: |
    import java.util.*

    private class Letter(
            val rows: List<String>
    ) {
        init {
            if (rows.distinctBy { it.length }.size != 1) {
                throw IllegalStateException("Bad letter. Not equal width in lines: ${rows.distinctBy { it.length }}")
            }
        }

        val width get() = rows[0].length
        val height get() = rows.size
    }

    private class Font(
            val charsToLetters: MutableMap<Char, Letter>,
            val height: Int
    ) {
        operator fun get(char: Char) = charsToLetters[char]
    }

    private fun makeLetters(fontStr: String): Font {
        val scanner = Scanner(fontStr)

        val h = scanner.nextInt()
        val n = scanner.nextInt()

        val charsToLetters = mutableMapOf<Char, Letter>()

        repeat(n) {
            val char = scanner.next()[0]
            val w = scanner.nextInt()
            scanner.nextLine()

            val rows = mutableListOf<String>()
            repeat(h) {
                rows += scanner.nextLine().trimEnd('\n')
            }
            charsToLetters[char] = Letter(rows)
        }

        val letterA = charsToLetters['a']!!
        charsToLetters[' '] = Letter(List(letterA.height) { " ".repeat(letterA.width) })

        return Font(charsToLetters, h)
    }

    /** Wrap with eights. */
    fun framed(lines: List<String>): String {
        val builder = StringBuilder()

        builder.append("8".repeat(lines[0].length + 8) + "\n")
        lines.forEach { line ->
            builder.append("88  $line  88\n")
        }
        builder.append("8".repeat(lines[0].length + 8))
        return builder.toString()
    }

    private fun centeredLines(lines: List<String>): List<String> {
        val maxLen = lines.map { it.length }.max()!!

        return lines.map { line ->
            val need = maxLen - line.length
            " ".repeat(need / 2) + line + " ".repeat((need + 1) / 2)
        }
    }

    fun authors(input: String): String {
        val roman = makeLetters(romanFontStr)
        val medium = makeLetters(mediumFontStr)

        val scanner = Scanner(input)
        val name = scanner.next() + " " + scanner.next()
        scanner.nextLine()
        val status = scanner.nextLine()

        val nameLetters = name.map {
            roman[it] ?: throw IllegalArgumentException("unknown letter $it in roman font")
        }
        val statusLetters = status.map {
            medium[it] ?: throw IllegalArgumentException("unknown letter $it in medium font")
        }

        val lines = mutableListOf<String>()

        repeat(roman.height) { i ->
            lines += nameLetters.map { it.rows[i] }.joinToString("")
        }
        repeat(medium.height) { i ->
            lines += statusLetters.map { it.rows[i] }.joinToString("")
        }

        return framed(centeredLines(lines))
    }
  learner_created: false
- name: test/Task3Test.kt
  visible: false
  text: |2

    import org.hyperskill.hstest.testcase.CheckResult


    class Task3Test : GeneratorTest<InputClue>() {

        override fun generate() = listOf(
                inputCase("Bill Gates\nVIP",
                        hint = "This test corresponds to the example #1."),

                inputCase("Tom Smith\nWorker",
                        hint = "This test corresponds to the example #2."),

                inputCase("Mr Anonimous\nParticipant",
                        hint = "This test corresponds to the example #3."),

                inputCase("X Y\nVeryVeryLoooooooooongSatus",
                        hint = "This test checks a long status with even length."),

                inputCase("X Y\nVeryVeryLooooooooooongSatus", true,
                        "This test checks a long status with uneven length."),

                inputCase("X Y\nStatus  with spaces",
                        hint = "Status should be printed with the " +
                                "same spaces as original, but name " +
                                "and surname shouldn't contain spaces."),

                inputCase("X Y\nStatus with   spaces!!!", true),

                inputCase(('a'..'z').joinToString("") + " Ivan\nHello", true,
                        hint = "This test checks all possible letters.")
        )

        private inline fun checkBadgeBorder(badge: String, onFailure: (msg: String) -> Unit) {
            val lines = badge.split("\n")

            if (lines.map { it.length }.toSet().size != 1) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.size < 2) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.first().any { it != '*' } || lines.last() != lines.first()) {
                onFailure("Your top and bottom edges don't consist of '*'.")
                return
            }
            if (!lines.drop(1).dropLast(1).all { it.startsWith("* ") && it.endsWith(" *") }) {
                onFailure("Your left and right edges don't consist of '*' with one space padding..")
                return
            }
        }

        /** Compare height, indentation and line contents. */
        private inline fun compareBadges(user: String, author: String, onFailure: (msg: String) -> Unit) {
            val userLines = user.split("\n")
            val authorLines = author.split("\n")

            if (userLines.size != authorLines.size) {
                onFailure("Signature height is incorrect: ${userLines.size} lines instead of ${authorLines.size}.")
                return
            }

            userLines.zip(authorLines)
                    .forEach { (userStr, authorStr) ->
                        if (userStr.trim('*', ' ') != authorStr.trim('*', ' ')) {
                            onFailure("Some line in your signature is incorrect.")
                            return
                        } else if (userStr != authorStr) {
                            onFailure("Some indentation in your signature is incorrect.")
                            return
                        }
                    }
        }


        override fun check(reply: String, clue: InputClue): CheckResult {
            val badgeStart = reply.indexOf('*')
            if (badgeStart == -1) {
                return CheckResult.wrong("Your output doesn't contain a signature, wrapped in '*' symbols.")
            }

            val userBadge = reply
                    .substring(badgeStart)
                    .trim('\n', ' ')

            checkBadgeBorder(userBadge) { errorMessage ->
                return CheckResult.wrong(errorMessage)
            }

            val badge = authors(clue.input)

            compareBadges(userBadge, badge) { errorMessage ->
                val (name, status) = clue.input.split("\n")
                return clue.toFailure("Wrong output for input lines \"$name\" and \"$status\". $errorMessage")
            }

            return CheckResult.correct()
        }
    }
  learner_created: false
- name: test/Task2Test.kt
  visible: false
  text: |2

    import org.hyperskill.hstest.testcase.CheckResult


    class Task2Test : GeneratorTest<InputClue>() {

        override fun generate() = listOf(
                inputCase("Albert Einstein"),
                inputCase("Nikola Tesla"),
                inputCase("XXXX yyyyyyyyyy", true),
                inputCase("Ivan Ivanov", true),
                inputCase("a a", true)
        )

        private inline fun checkBadgeBorder(badge: String, onFailure: (msg: String) -> Unit) {
            val lines = badge.split("\n")

            if (lines.map { it.length }.toSet().size != 1) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.size < 2) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.first().any { it != '*' } || lines.last() != lines.first()) {
                onFailure("Your top and bottom edges don't consist of '*'.")
                return
            }
            if (!lines.drop(1).dropLast(1).all { it.startsWith("* ") && it.endsWith(" *") }) {
                onFailure("Your left and right edges don't consist of '*' with one space padding.")
                return
            }
        }


        override fun check(reply: String, clue: InputClue): CheckResult {
            val badgeStart = reply.indexOf('*')
            if (badgeStart == -1) {
                return CheckResult.wrong("Your output doesn't contain a badge, wrapped in '*' symbols.")
            }

            val userBadge = reply
                    .substring(badgeStart)
                    .trim('\n', ' ')

            checkBadgeBorder(userBadge) { errorMessage ->
                return CheckResult.wrong(errorMessage)
            }


            val name = clue.input.trim().split(' ').filter { it != "" }.joinToString(" ")

            val badge = "*".repeat(name.length + 4) + "\n" +
                    "* $name *\n" +
                    "*".repeat(name.length + 4)


            if (badge != userBadge) {
                return clue.toFailure("Wrong output for the input line \"${clue.input}\".")
            } else {
                return CheckResult.correct()
            }
        }
    }
  learner_created: false
- name: src/signature/Main.kt
  visible: true
  text: |
    package signature

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Task1Test.kt
  visible: false
  text: |2+

    import org.hyperskill.hstest.testcase.CheckResult


    class Task1Test : GeneratorTest<Unit>() {

        override fun generate() = listOf(
                testCase(Unit, "")
        )

        override fun check(reply: String, clue: Unit): CheckResult {
            val badge = " _____________\n" +
                    "| Hyper Skill |\n" +
                    " ¯¯¯¯¯¯¯¯¯¯¯¯¯"

            if (reply.trim('\n', ' ') != badge.trim(' ')) {
                return CheckResult.wrong(
                        "Your output is wrong! " +
                                "See example #1.")
            } else {
                return CheckResult.correct()
            }

        }
    }

  learner_created: false
feedback_link: https://hyperskill.org/projects/71/stages/393/implement
status: Unchecked
record: 4
